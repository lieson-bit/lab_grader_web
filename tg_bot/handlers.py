from aiogram import *
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from fastapi import HTTPException
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from bot_db_manager import Database
import requests
import markups as mp
import os


bd = Database('bot_db.db')
API_BASE_URL = os.getenv("API_BASE_URL")
router = Router()

class UserRegister(StatesGroup):
    WaitingForName = State()
    WaitingForSurname = State()
    WaitingForPatronim = State()
    WaitingForNickname = State()

class ProfileEdit(StatesGroup):
    WaitingForNewName = State()
    WaitingForNewSurname = State()
    WaitingForNewPatronim = State()
    WaitingForNewNickname = State()

class SelectingData(StatesGroup):
    SelectingCourse = State()
    SelectingGroup = State()
    SelectingLab = State()
    SelectingCheck = State()

@router.message(Command('start'))
async def start(message: Message, state: FSMContext):
    if(not bd.user_exist(message.from_user.id)):
        bd.add_user(message.from_user.id)
        await message.answer("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è: ")
        await state.set_state(UserRegister.WaitingForName)
    else:        
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã", reply_markup=mp.main_keyboard)


@router.message(UserRegister.WaitingForName)
async def set_user_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name or not all(x.isalpha() or x.isspace() for x in name):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
        return
    bd.set_user_name(message.from_user.id, name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ:")
    await state.set_state(UserRegister.WaitingForPatronim)

@router.message(UserRegister.WaitingForPatronim)
async def set_user_patronim(message: Message, state: FSMContext):
    patronim = message.text.strip()
    if not patronim or not all(x.isalpha() or x.isspace() for x in patronim):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ.")
        return
    bd.set_user_patronim(message.from_user.id, patronim)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(UserRegister.WaitingForSurname)

@router.message(UserRegister.WaitingForSurname)
async def set_user_surname(message: Message, state: FSMContext):
    surname = message.text.strip()
    if not surname or not all(x.isalpha() or x.isspace() for x in surname):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é.")
        return
    bd.set_user_surname(message.from_user.id, surname)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π GitHub nickname:")
    await state.set_state(UserRegister.WaitingForNickname)

@router.message(UserRegister.WaitingForNickname)
async def set_user_nickname(message: Message, state: FSMContext):
    nickname = message.text.strip()
    if not nickname:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π GitHub nickname.")
        return
    
    # –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è GitHub nickname (—Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    allowed_chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_"
    allowed_set = set(allowed_chars)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –î–ª–∏–Ω–∞ (1-39 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(nickname) > 39:
        await message.answer("GitHub nickname –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 40 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –¢–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    if not all(char in allowed_set for char in nickname):
        await message.answer("GitHub nickname –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ: –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ù–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è/–∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –¥–µ—Ñ–∏—Å–æ–º
    if nickname.startswith('-') or nickname.endswith('-'):
        await message.answer("GitHub nickname –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –¥–µ—Ñ–∏—Å–æ–º.")
        return
    
    try:
        github_response = requests.get(f"https://api.github.com/users/{nickname}")
        if github_response.status_code != 200:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å GitHub –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ GitHub –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    bd.set_user_github_nickname(message.from_user.id, nickname)
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=mp.main_keyboard)
    await state.clear()

@router.message(F.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å')
async def menu_profile(message: Message):
    await message.answer(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–§–ò–û: {bd.get_user_name(message.from_user.id)} {bd.get_user_patronim(message.from_user.id)} {bd.get_user_surname(message.from_user.id)}\nGithub nickname: {bd.get_user_github_nickname(message.from_user.id)}", reply_markup=mp.profile_keyboard)

@router.message(F.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
async def edit_profile(message: Message, state: FSMContext):
    await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è\n –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:")
    await state.set_state(ProfileEdit.WaitingForNewName)

@router.message(ProfileEdit.WaitingForNewName)
async def set_new_user_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name or not all(x.isalpha() or x.isspace() for x in name):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
        return
    bd.set_user_name(message.from_user.id, name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ:")
    await state.set_state(ProfileEdit.WaitingForNewPatronim)

@router.message(ProfileEdit.WaitingForNewPatronim)
async def set_new_user_patronim(message: Message, state: FSMContext):
    patronim = message.text.strip()
    if not patronim or not all(x.isalpha() or x.isspace() for x in patronim):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ.")
        return
    bd.set_user_patronim(message.from_user.id, patronim)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(ProfileEdit.WaitingForNewSurname)

@router.message(ProfileEdit.WaitingForNewSurname)
async def set_new_user_surname(message: Message, state: FSMContext):
    surname = message.text.strip()
    if not surname or not all(x.isalpha() or x.isspace() for x in surname):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é.")
        return
    bd.set_user_surname(message.from_user.id, surname)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π GitHub nickname:")
    await state.set_state(ProfileEdit.WaitingForNewNickname)

@router.message(ProfileEdit.WaitingForNewNickname)
async def set_new_user_nickname(message: Message, state: FSMContext):
    nickname = message.text.strip()
    if not nickname:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–≤—ã–π GitHub nickname.")
        return
    
    # –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è GitHub nickname (—Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    allowed_chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_"
    allowed_set = set(allowed_chars)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –î–ª–∏–Ω–∞ (1-39 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(nickname) > 39:
        await message.answer("GitHub nickname –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 40 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –¢–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    if not all(char in allowed_set for char in nickname):
        await message.answer("GitHub nickname –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ: –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ù–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è/–∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –¥–µ—Ñ–∏—Å–æ–º
    if nickname.startswith('-') or nickname.endswith('-'):
        await message.answer("GitHub nickname –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –¥–µ—Ñ–∏—Å–æ–º.")
        return
    
    try:
        github_response = requests.get(f"https://api.github.com/users/{nickname}")
        if github_response.status_code != 200:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å GitHub –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ GitHub –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    bd.set_user_github_nickname(message.from_user.id, nickname)
    bd.set_user_github_nickname(message.from_user.id, nickname)
    await message.answer("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω")  
    await state.clear()
    await menu_profile(message)

@router.message(F.text == 'üîô –ù–∞–∑–∞–¥')
async def go_back(message: Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=mp.main_keyboard)


@router.message(F.text == 'üìö –í—ã–±—Ä–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É')
async def select_course(message: Message, state: FSMContext):
    response = requests.get(f"{API_BASE_URL}/courses")
    print("response:\n", response, "\n\n")
    if response.status_code != 200:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:", reply_markup=mp.courses_keyboard(response.json()))
    await state.set_state(SelectingData.SelectingCourse)

@router.callback_query(SelectingData.SelectingCourse, F.data.startswith("course_"))
async def select_group(callback: CallbackQuery, state: FSMContext):
    course_id=callback.data.split("_")[1]
    await state.update_data(course_id=course_id)
    data = await state.get_data()

    response=requests.get(f"{API_BASE_URL}/courses/{data["course_id"]}/groups")
    if response.status_code != 200:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø")
        return
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=mp.groups_keyboard(response.json()))
    await state.set_state(SelectingData.SelectingGroup)

@router.callback_query(SelectingData.SelectingGroup, F.data.startswith("group_"))
async def select_lab(callback: CallbackQuery, state: FSMContext):
    group_id=callback.data.split("_")[1]
    await state.update_data(group_id=group_id)
    data = await state.get_data()

    response=requests.get(f"{API_BASE_URL}/courses/{data["course_id"]}/groups/{data["group_id"]}/labs")
    if response.status_code != 200:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç")
        return
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É:", reply_markup=mp.labs_keyboard(response.json()))
    await state.set_state(SelectingData.SelectingLab)


@router.callback_query(SelectingData.SelectingLab, F.data.startswith("lab_"))
async def select_check(callback: CallbackQuery, state: FSMContext):
    lab_id = callback.data.split("_")[1]
    await state.update_data(lab_id=lab_id)
    data = await state.get_data()

    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
        f"–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {data['course_id']}\n"
        f"–ì—Ä—É–ø–ø–∞: {data['group_id']}\n"
        f"–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è: {data['lab_id']}\n\n"
        f"–ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_check")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_check")]
        ])
    )

    await state.set_state(SelectingData.SelectingCheck)

@router.callback_query(SelectingData.SelectingCheck, F.data == "confirm_check")
async def confirm_check(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    
    registration_data = {
            "name": bd.get_user_name(callback.from_user.id),
            "surname": bd.get_user_surname(callback.from_user.id),
            "patronymic": bd.get_user_patronim(callback.from_user.id),
            "github": bd.get_user_github_nickname(callback.from_user.id)
        }

    reg_response = requests.post(f"{API_BASE_URL}/courses/{data["course_id"]}/groups/{data["group_id"]}/register", json=registration_data)

    if reg_response.status_code != 200:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞.\n –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.")
        return        
    else:
        await callback.message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.")

    grade_data = {"github": bd.get_user_github_nickname(callback.from_user.id)}
    response = requests.post(f"{API_BASE_URL}/courses/{data["course_id"]}/groups/{data["group_id"]}/labs/{data["lab_id"]}/grade", json=grade_data)
    result = response.json()
    if response.status_code == 200 and result["result"] == '‚úì':
        await callback.message.answer('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã', reply_markup=mp.main_keyboard)
    else:
        await callback.message.answer('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏', reply_markup=mp.main_keyboard)
    await state.clear()

@router.callback_query(SelectingData.SelectingCheck, F.data == "cancel_check")
async def cancel_check(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=mp.main_keyboard)
    await state.clear()

@router.callback_query(F.data == "back_to_courses")
async def back_to_courses(callback: CallbackQuery, state: FSMContext):
    response = requests.get(f"{API_BASE_URL}/courses")
    print("response:\n", response, "\n\n")
    if response.status_code != 200:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω")
        return
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:", reply_markup=mp.courses_keyboard(response.json()))
    await state.set_state(SelectingData.SelectingCourse)

@router.callback_query(F.data == "back_to_groups")
async def back_to_groups(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    response=requests.get(f"{API_BASE_URL}/courses/{data["course_id"]}/groups")
    if response.status_code != 200:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø")
        return
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=mp.groups_keyboard(response.json()))
    await state.set_state(SelectingData.SelectingGroup)



