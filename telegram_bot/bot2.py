import sqlite3
import httpx
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.ext import MessageHandler, filters, ConversationHandler

from config import TOKEN

DB_PATH = "users.db"

WAITING_FOR_FULL_NAME = 1
WAITING_FOR_CONFIRMATION = 2
WAITING_FOR_GITHUB = 3

CHOOSING_COURSE = 10
CHOOSING_LAB = 11

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        language TEXT DEFAULT 'ru',
        group_id TEXT,
        surname TEXT,
        name TEXT,
        patronymic TEXT,
        github TEXT,
        authorized INTEGER DEFAULT 0,
        last_message TEXT,
        last_buttons TEXT
    )
    """)
    conn.commit()
    conn.close()



# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
def upsert_user(user_id: int, language: str = "ru"):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO users (user_id, language) VALUES (?, ?)", (user_id, language))
    conn.commit()
    conn.close()



# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def set_language(user_id: int, language: str):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET language = ? WHERE user_id = ?", (language, user_id))
    conn.commit()
    conn.close()



# –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_language(user_id: int) -> str:
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT language FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else "ru"



# –¢–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
def get_welcome_text_ru() -> str:
    return (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±—É—á–∞—é—â–∏—Ö—Å—è –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ –ì–£–ê–ü, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –∫—É—Ä—Å—ã –ü–æ–ª—è–∫–∞ –ú. –î.\n\n"
        "–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å –µ–≥–æ –ø–æ–º–æ—â—å—é?\n"
        "‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π GitHub-–Ω–∏–∫ –≤ Google-—Ç–∞–±–ª–∏—Ü—É –∫—É—Ä—Å–∞\n"
        "‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö\n\n"
        "üìå –î–∞–ª–µ–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞.\n\n"
        "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –í—ã–±–∏—Ä–∞–π—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É! üöÄ"
    )



# –¢–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
def get_welcome_text_en() -> str:
    return (
        "üëã Welcome!\n\n"
        "This bot is designed for SUAI University students attending M. D. Polyak's courses.\n\n"
        "What can it do?\n"
        "‚úÖ Add your GitHub username to the course's Google Sheet\n"
        "‚úÖ Check test completion in repositories\n\n"
        "üìå You'll need to provide some information to access the bot's features.\n\n"
        "Ready to begin? Select an action! üöÄ"
    )



# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_keyboard(language: str) -> InlineKeyboardMarkup:
    if language == "ru":
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("Switch to English", callback_data="lang_en")],
            [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue")]
        ])
    else:
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
            [InlineKeyboardButton("Continue", callback_data="continue")]
        ])



def get_main_keyboard(lang: str) -> InlineKeyboardMarkup:
    if lang == "ru":
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å GitHub-–Ω–∏–∫ –≤ —Ç–∞–±–ª–∏—Ü—É", callback_data="register_github")],
            [InlineKeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å GitHub-–Ω–∏–∫", callback_data="sync_github")],
            [InlineKeyboardButton("üß™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤", callback_data="check_tests")],
            [InlineKeyboardButton("Switch to English", callback_data="lang_en2")]
        ])
    else:
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù Submit GitHub username", callback_data="register_github")],
            [InlineKeyboardButton("üîÑ Sync GitHub username", callback_data="sync_github")],
            [InlineKeyboardButton("üß™ Check test results", callback_data="check_tests")],
            [InlineKeyboardButton("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π", callback_data="lang_ru2")]
        ])


def update_last_menu(user_id, msg, keyboard):
    import json
    buttons_data = [[{"text": b.text, "callback_data": b.callback_data} for b in row] for row in keyboard.inline_keyboard]
    conn = sqlite3.connect(DB_PATH)
    conn.execute(
        "UPDATE users SET last_message = ?, last_buttons = ? WHERE user_id = ?",
        (msg, json.dumps(buttons_data), user_id)
    )
    conn.commit()
    conn.close()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data.pop("awaiting_full_name", None)
    context.user_data.pop("awaiting_github", None)
    context.user_data.pop("auth_data", None)
    
    user_id = update.effective_user.id
    upsert_user(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ —á–∏—Ç–∞–µ–º last_message + last_buttons
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(
        "SELECT authorized, last_message, last_buttons FROM users WHERE user_id = ?",
        (user_id,)
    )
    row = cursor.fetchone()
    conn.close()

    if row and row[0] == 1:
        lang = get_language(user_id)
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        msg = "üîê –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å." if lang == "ru" else "üîê You're already signed in."
        await update.message.reply_text(msg)

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        last_msg, last_buttons_json = row[1], row[2]
        if last_msg and last_buttons_json:
            import json
            buttons_data = json.loads(last_buttons_json)
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(item["text"], callback_data=item["callback_data"])
                    for item in row_data
                ]
                for row_data in buttons_data
            ])
            await update.message.reply_text(last_msg, reply_markup=keyboard)
        return

    # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –∫–∞–∫ –±—ã–ª–æ
    language = get_language(user_id)
    text = get_welcome_text_ru() if language == "ru" else get_welcome_text_en()
    keyboard = get_keyboard(language)
    await update.message.reply_text(text, reply_markup=keyboard)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data

    if data == "lang_en":
        set_language(user_id, "en")
        await query.edit_message_text(get_welcome_text_en(), reply_markup=get_keyboard("en"))
    
    elif data == "lang_ru":
        set_language(user_id, "ru")
        await query.edit_message_text(get_welcome_text_ru(), reply_markup=get_keyboard("ru"))
    
    elif data == "continue":
        lang = get_language(user_id)
        if lang == "ru":
            prompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`1234 –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ`"
        else:
            prompt = "Enter your group number and full name in this format:\n`1234 Lastname Firstname Patronymic`"
        await query.message.edit_text(prompt, parse_mode="Markdown")
        context.user_data["awaiting_full_name"] = True
        return WAITING_FOR_FULL_NAME
    
    elif data == "confirm_auth":
        context.user_data.pop("awaiting_full_name", None)
        lang = get_language(user_id)
    
        auth_data = context.user_data.get("auth_data")
        if not auth_data:
            await query.message.edit_text(
                "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É." 
                if get_language(user_id) == "ru" 
                else "‚ö†Ô∏è Internal error. Please try again."
            )
            
            next_msg = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "üìå Select an action:"
            keyboard = get_main_keyboard(lang)
            await query.message.reply_text(next_msg, reply_markup=keyboard)

            update_last_menu(user_id, next_msg, keyboard)
            
            return ConversationHandler.END

        cursor = sqlite3.connect(DB_PATH).cursor()
        cursor.execute("""
            UPDATE users SET group_id = ?, surname = ?, name = ?, patronymic = ?, authorized = 1
            WHERE user_id = ?
        """, (
            auth_data["group_id"],
            auth_data["surname"],
            auth_data["name"],
            auth_data["patronymic"],
            user_id
        ))
        cursor.connection.commit()
        cursor.connection.close()

        msg = "‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!" if lang == "ru" else "‚úÖ Authorization successful!"
        await query.message.edit_text(msg)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        next_msg = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "üìå Select an action:"
        
        keyboard = get_main_keyboard(lang)
        
        await query.message.reply_text(next_msg, reply_markup=keyboard)

        import json
        
        buttons_data = [
            [
                {"text": btn.text, "callback_data": btn.callback_data}
                for btn in row_buttons
            ]
            for row_buttons in keyboard.inline_keyboard
        ]

        conn = sqlite3.connect(DB_PATH)
        conn.execute(
            "UPDATE users SET last_message = ?, last_buttons = ? WHERE user_id = ?",
            (next_msg, json.dumps(buttons_data), user_id)
        )
        conn.commit()
        conn.close()
        
        context.user_data.pop("auth_data", None)

        return ConversationHandler.END
    
    elif data == "cancel_auth":
        context.user_data.pop("awaiting_full_name", None)
        context.user_data.pop("auth_data", None)
    
        lang = get_language(user_id)
        text = get_welcome_text_ru() if lang == "ru" else get_welcome_text_en()
        keyboard = get_keyboard(lang)
        await query.message.edit_text(text, reply_markup=keyboard)
        return ConversationHandler.END
        
    elif data == "register_github":
        lang = get_language(user_id)
        prompt = (
            "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π GitHub-–Ω–∏–∫:"
            if lang == "ru"
            else "Enter your GitHub username:"
        )
        await query.message.edit_text(prompt)
        context.user_data["awaiting_github"] = True
        return WAITING_FOR_GITHUB
        
    elif data == "confirm_github":
        github = context.user_data.pop("pending_github", None)
        if not github:
            await query.message.edit_text("‚ö†Ô∏è GitHub-–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏.")
            return ConversationHandler.END

        # –≤—ã–∑–æ–≤ handle_github_submission –∫–∞–∫ –ø–æ–¥—Ñ—É–Ω–∫—Ü–∏–∏
        return await handle_github_submission(query, context, github)

    elif data == "cancel_github":
        context.user_data.pop("pending_github", None)

        lang = get_language(user_id)
        next_msg = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "üìå Select an action:"
        keyboard = get_main_keyboard(lang)

        await query.message.edit_text(next_msg, reply_markup=keyboard)

        update_last_menu(user_id, next_msg, keyboard)

        return ConversationHandler.END
        
    elif data == "sync_github":
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT group_id, surname, name, patronymic FROM users WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        conn.close()

        lang = get_language(user_id)

        if not row or not all(row):
            msg = "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –§–ò–û –∏ –≥—Ä—É–ø–ø—É." if lang == "ru" \
                else "‚ö†Ô∏è Please provide your full name and group first."
            await query.message.edit_text(msg)

            next_msg = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "üìå Select an action:"
            keyboard = get_main_keyboard(lang)
            await query.message.reply_text(next_msg, reply_markup=keyboard)

            update_last_menu(user_id, next_msg, keyboard)
            
            return ConversationHandler.END

        group_id_db, surname, name, patronymic = row

        async with httpx.AsyncClient(base_url="http://backend:8000") as client:
            try:
                r = await client.get("/courses")
                r.raise_for_status()
                courses = r.json()
            except Exception:
                msg = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤." if lang == "ru" \
                    else "‚ö†Ô∏è Failed to retrieve course list."
                await query.message.edit_text(msg)

                next_msg = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "üìå Select an action:"
                keyboard = get_main_keyboard(lang)
                await query.message.reply_text(next_msg, reply_markup=keyboard)

                update_last_menu(user_id, next_msg, keyboard)
                
                return ConversationHandler.END

            course_id = None
            for i, _ in enumerate(courses, start=1):
                r = await client.get(f"/courses/{i}/groups")
                if r.status_code == 200 and group_id_db in r.json():
                    course_id = i
                    break

            if not course_id:
                msg = "‚ö†Ô∏è –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω." if lang == "ru" else "‚ö†Ô∏è Course not found."
                await query.message.edit_text(msg)

                next_msg = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "üìå Select an action:"
                keyboard = get_main_keyboard(lang)
                await query.message.reply_text(next_msg, reply_markup=keyboard)

                update_last_menu(user_id, next_msg, keyboard)
                
                return ConversationHandler.END

            payload = {
                "surname": surname,
                "name": name,
                "patronymic": patronymic
            }

            try:
                r = await client.post(f"/courses/{course_id}/groups/{group_id_db}/github", json=payload, timeout=httpx.Timeout(15.0))
                r.raise_for_status()
                github = r.json().get("github")
            except httpx.HTTPStatusError as e:
                detail = e.response.json().get("detail", "")
                msg = f"‚ö†Ô∏è {detail}" if lang == "ru" else f"‚ö†Ô∏è {detail}"
                await query.message.edit_text(msg)

                next_msg = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "üìå Select an action:"
                keyboard = get_main_keyboard(lang)
                await query.message.reply_text(next_msg, reply_markup=keyboard)

                update_last_menu(user_id, next_msg, keyboard)
                
                return ConversationHandler.END

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º GitHub –≤ –ë–î
            conn = sqlite3.connect(DB_PATH)
            conn.execute("UPDATE users SET github = ? WHERE user_id = ?", (github, user_id))
            conn.commit()
            conn.close()

            msg = "‚úÖ GitHub-–Ω–∏–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü—ã." if lang == "ru" \
                else "‚úÖ GitHub username synchronized from the table."
            await query.message.edit_text(msg)

            next_msg = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "üìå Select an action:"
            keyboard = get_main_keyboard(lang)
            await query.message.reply_text(next_msg, reply_markup=keyboard)

            update_last_menu(user_id, next_msg, keyboard)

            return ConversationHandler.END
    
    elif data == "check_tests":
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT group_id, github FROM users WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        conn.close()

        lang = get_language(user_id)
        
        if not row or not row[0] or not row[1]:
            await query.message.edit_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –§–ò–û, –≥—Ä—É–ø–ø—É –∏ GitHub-–Ω–∏–∫." if lang == "ru" else "‚ö†Ô∏è Please first provide your group, name and GitHub username.")
            
            lang = get_language(user_id)
            next_msg = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "üìå Select an action:"
            keyboard = get_main_keyboard(lang)
            await query.message.reply_text(next_msg, reply_markup=keyboard)

            update_last_menu(user_id, next_msg, keyboard)
            
            return ConversationHandler.END

        group_id_db, github = row
        context.user_data["test_github"] = github
        context.user_data["test_group"] = group_id_db

        async with httpx.AsyncClient(base_url="http://backend:8000") as client:
            try:
                resp = await client.get("/courses")
                resp.raise_for_status()
                courses = resp.json()
            except Exception:
                msg = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤." if lang == "ru" else "‚ö†Ô∏è Failed to fetch course list."
                await query.message.edit_text(msg)
                next_msg = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "üìå Select an action:"
                keyboard = get_main_keyboard(lang)
                await query.message.reply_text(next_msg, reply_markup=keyboard)

                update_last_menu(user_id, next_msg, keyboard)
                
                return ConversationHandler.END

            matching_courses = []
            for i, course in enumerate(courses, start=1):
                r = await client.get(f"/courses/{i}/groups")
                if r.status_code == 200 and group_id_db in r.json():
                    matching_courses.append((i, course["name"]))

        if not matching_courses:
            msg = "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫—É—Ä—Å–æ–≤." if lang == "ru" else "‚ùå No matching courses found."
            await query.message.edit_text(msg)
            
            next_msg = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "üìå Select an action:"
            keyboard = get_main_keyboard(lang)
            await query.message.reply_text(next_msg, reply_markup=keyboard)

            update_last_menu(user_id, next_msg, keyboard)
            
            return ConversationHandler.END

        if len(matching_courses) == 1:
            context.user_data["test_course"] = matching_courses[0][0]
            return await show_lab_buttons(query, context)

        # –í—ã–±–æ—Ä –∫—É—Ä—Å–∞ –≤—Ä—É—á–Ω—É—é
        keyboard = [[InlineKeyboardButton(name, callback_data=f"select_course_{cid}")] for cid, name in matching_courses]
        
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞" if lang == "ru" else "‚Ü©Ô∏è Cancel", callback_data="cancel_test")])
        
        await query.message.edit_text("üìò –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:" if lang == "ru" else "üìò Select a course:", reply_markup=InlineKeyboardMarkup(keyboard))
        
        return CHOOSING_COURSE

    elif data.startswith("check_lab_"):
        lab_id = data.removeprefix("check_lab_")
        course_id = context.user_data.get("test_course")
        group_id = context.user_data.get("test_group")
        github = context.user_data.get("test_github")
        lang = get_language(user_id)

        if not all([course_id, group_id, github]):
            msg = "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö." if lang == "ru" \
                else "‚ö†Ô∏è Internal error: missing data."
            await query.message.edit_text(msg)
            
            next_msg = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "üìå Select an action:"
            keyboard = get_main_keyboard(lang)
            await query.message.reply_text(next_msg, reply_markup=keyboard)

            update_last_menu(user_id, next_msg, keyboard)
            
            return ConversationHandler.END

        await query.message.edit_text("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è..." if lang == "ru" else "‚è≥ Running tests...")

        async with httpx.AsyncClient(base_url="http://backend:8000") as client:
            try:
                r = await client.post(
                    f"/courses/{course_id}/groups/{group_id}/labs/{lab_id}/grade",
                    json={"github": github},
                    timeout=httpx.Timeout(60.0)
                )

                if r.status_code == 200:
                    data = r.json()
                    passed = data.get("passed", "")
                    result = data.get("result", "")
                    message = data.get("message", "")
                    checks = data.get("checks", [])

                    status_line = (
                        "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ." if result == "‚úì"
                        else "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö."
                    ) if lang == "ru" else (
                        "‚úÖ All tests passed successfully." if result == "‚úì"
                        else "‚ùå Errors detected in tests."
                    )

                    full_msg = (
                        f"{status_line}\n"
                        f"{message}\n"
                        f"{passed}\n\n" +
                        "\n".join(checks)
                    )
                    await query.message.edit_text(full_msg, disable_web_page_preview=True)

                else:
                    try:
                        detail = r.json().get("detail", "")
                    except Exception:
                        detail = ""

                    if r.status_code == 400:
                        detail_map = {
                            "Missing course configuration": (
                                "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—É—Ä—Å–∞.",
                                "‚ùå Course configuration is missing."
                            ),
                            "–°—Ç–æ–ª–±–µ—Ü 'GitHub' –Ω–µ –Ω–∞–π–¥–µ–Ω": (
                                "‚ùå –°—Ç–æ–ª–±–µ—Ü 'GitHub' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.",
                                "‚ùå Column 'GitHub' not found in spreadsheet."
                            )
                        }
                    elif r.status_code == 403:
                        detail_map = {
                            "üö® test_main.py –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –∏–ª–∏ —É–¥–∞–ª—ë–Ω": (
                                "‚ùå test_main.py –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –∏–ª–∏ —É–¥–∞–ª—ë–Ω.",
                                "‚ùå test_main.py was modified or deleted."
                            ),
                            "üö® –ò–∑–º–µ–Ω—ë–Ω —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ tests/": (
                                "‚ùå –í –ø–∞–ø–∫–µ tests/ –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –∏–ª–∏ —É–¥–∞–ª—ë–Ω —Ñ–∞–π–ª.",
                                "‚ùå A file in the `tests/` folder was modified or deleted."
                            ),
                            "üö® –ò–∑–º–µ–Ω—ë–Ω —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ .github/workflows/": (
                                "‚ùå –í –ø–∞–ø–∫–µ .github/workflows/ –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –∏–ª–∏ —É–¥–∞–ª—ë–Ω —Ñ–∞–π–ª.",
                                "‚ùå A file in the .github/workflows/ folder was modified or deleted."
                            )
                        }
                    elif r.status_code == 404:
                        detail_map = {
                            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤": (
                                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤.",
                                "‚ùå Failed to fetch commit list."
                            ),
                            "–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏": (
                                "‚ùå –í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–º–∏—Ç—ã.",
                                "‚ùå No commits found in repository."
                            ),
                            "–ü—Ä–æ–≤–µ—Ä–∫–∏ CI –Ω–µ –Ω–∞–π–¥–µ–Ω—ã": (
                                "‚ùå CI-–ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                                "‚ùå CI checks not found."
                            ),
                            "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Google –¢–∞–±–ª–∏—Ü–µ": (
                                "‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Google –¢–∞–±–ª–∏—Ü–µ.",
                                "‚ùå Group not found in spreadsheet."
                            ),
                            "GitHub –ª–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ": (
                                "‚ùå GitHub –ª–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.",
                                "‚ùå GitHub login not found in spreadsheet."
                            )
                        }
                    else:
                        detail_map = {}

                    if detail in detail_map:
                        msg = detail_map[detail][0] if lang == "ru" else detail_map[detail][1]
                    else:
                        msg = (
                            f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ {r.status_code}: {detail}"
                            if lang == "ru"
                            else f"‚ùå Unknown error {r.status_code}: {detail}"
                        )

                    await query.message.edit_text(msg)

            except Exception:
                msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞." if lang == "ru" \
                    else "‚ö†Ô∏è Failed to perform the request."
                await query.message.edit_text(msg)
                
        lang = get_language(user_id)
        next_msg = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "üìå Select an action:"
        keyboard = get_main_keyboard(lang)
        await query.message.reply_text(next_msg, reply_markup=keyboard)

        update_last_menu(user_id, next_msg, keyboard)

        return ConversationHandler.END
        
    elif data.startswith("select_course_"):
        course_id = int(data.removeprefix("select_course_"))
        context.user_data["test_course"] = course_id
        return await show_lab_buttons(query, context)
        
    elif data == "cancel_test":
        lang = get_language(user_id)
        text = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "üìå Select an action:"
        keyboard = get_main_keyboard(lang)

        await query.message.edit_text(text, reply_markup=keyboard)

        update_last_menu(user_id, text, keyboard)

        # –ß–∏—Å—Ç–∏–º context.user_data –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        context.user_data.pop("test_github", None)
        context.user_data.pop("test_group", None)
        context.user_data.pop("test_course", None)

        return ConversationHandler.END
        
    elif data == "lang_en2":
            set_language(user_id, "en")
            text = "üìå Select an action:"
            keyboard = get_main_keyboard("en")
            await query.edit_message_text(text, reply_markup=keyboard)

            update_last_menu(user_id, text, keyboard)

    elif data == "lang_ru2":
            set_language(user_id, "ru")
            text = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            keyboard = get_main_keyboard("ru")
            await query.edit_message_text(text, reply_markup=keyboard)

            update_last_menu(user_id, text, keyboard)



async def handle_github_submission(query, context, github: str) -> int:
    user_id = query.from_user.id
    lang = get_language(user_id)

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(
        "SELECT group_id, surname, name, patronymic FROM users WHERE user_id = ?",
        (user_id,)
    )
    row = cursor.fetchone()
    conn.close()

    if not row:
        await query.message.edit_text(
            "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É." if lang == "ru"
            else "‚ö†Ô∏è Internal error. Please try again."
        )
        
        next_msg = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "üìå Select an action:"
        keyboard = get_main_keyboard(lang)
        await query.message.reply_text(next_msg, reply_markup=keyboard)

        update_last_menu(user_id, next_msg, keyboard)
        
        return ConversationHandler.END

    group_id_db, surname, name, patronymic = row

    async with httpx.AsyncClient(base_url="http://backend:8000") as client:
        resp = await client.get("/courses")
        resp.raise_for_status()
        courses = resp.json()

        course_id = None
        for i, _ in enumerate(courses, start=1):
            r = await client.get(f"/courses/{i}/groups")
            if r.status_code == 200 and group_id_db in r.json():
                course_id = i
                break

        payload = {
            "surname":    surname,
            "name":       name,
            "patronymic": patronymic,
            "github":     github
        }

        reg = await client.post(
            f"/courses/{course_id}/groups/{group_id_db}/register",
            json=payload,
            timeout=httpx.Timeout(15.0)
        )
    
    save_github = False
    
    if reg.status_code == 200:
        resp_json = reg.json()
        status = resp_json.get("status")
        if status == "already_registered":
            msg = "‚ÑπÔ∏è –≠—Ç–æ—Ç GitHub-–Ω–∏–∫ —É–∂–µ –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω —Ä–∞–Ω–µ–µ." if lang == "ru" \
                else "‚ÑπÔ∏è This GitHub username was already submitted earlier."
        else:
            msg = "‚úÖ –í–∞—à GitHub-–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü—É." if lang == "ru" \
                else "‚úÖ Your GitHub username has been successfully saved to the table."
            save_github = True
    elif reg.status_code == 400:
        msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã –∫—É—Ä—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é." if lang == "ru" \
            else "‚ö†Ô∏è Course table is misconfigured. Please contact your instructor."
    elif reg.status_code == 404:
        msg = "‚ùå –°—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ GitHub-–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ." if lang == "ru" \
            else "‚ùå Student or GitHub user not found. Please check your input."
    elif reg.status_code == 409:
        msg = "üö´ GitHub-–Ω–∏–∫ —É–∂–µ –±—ã–ª —É–∫–∞–∑–∞–Ω —Ä–∞–Ω–µ–µ. –î–ª—è –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é." if lang == "ru" \
            else "üö´ Your GitHub username was already submitted earlier. Contact your instructor to change it."
    elif reg.status_code == 500:
        msg = "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ." if lang == "ru" \
            else "‚ö†Ô∏è Internal server error. Please try again later."
    else:
        msg = f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (–∫–æ–¥ {reg.status_code})" if lang == "ru" \
            else f"‚ùì Unknown error (code {reg.status_code})"

    await query.message.edit_text(msg)

    next_msg = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "üìå Select an action:"
    keyboard = get_main_keyboard(lang)
    await query.message.reply_text(next_msg, reply_markup=keyboard)

    import json
    buttons_data = [[{"text": b.text, "callback_data": b.callback_data} for b in row] for row in keyboard.inline_keyboard]
    
    if save_github:
        conn = sqlite3.connect(DB_PATH)
        conn.execute(
            "UPDATE users SET github = ?, last_message = ?, last_buttons = ? WHERE user_id = ?",
            (github, next_msg, json.dumps(buttons_data), user_id)
        )
        conn.commit()
        conn.close()
    else:
        conn = sqlite3.connect(DB_PATH)
        conn.execute(
            "UPDATE users SET last_message = ?, last_buttons = ? WHERE user_id = ?",
            (next_msg, json.dumps(buttons_data), user_id)
        )
        conn.commit()
        conn.close()

    return ConversationHandler.END
    
    

async def handle_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not context.user_data.get("awaiting_full_name", False):
        return ConversationHandler.END
        
    user_id = update.effective_user.id
    text = update.message.text.strip()
    lang = get_language(user_id)

    parts = text.split(maxsplit=4)
    if len(parts) < 3:
        msg = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: `1234 –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ`" if lang == "ru" \
            else "‚ùå Invalid format. Please try again: `1234 Lastname Firstname Patronymic`"
        await update.message.reply_text(msg, parse_mode="Markdown")
        return WAITING_FOR_FULL_NAME

    group = parts[0]
    surname = parts[1]
    name = parts[2]
    patronymic = parts[3] if len(parts) > 3 else ""

    async with httpx.AsyncClient(base_url="http://backend:8000") as client:
        try:
            resp = await client.get("/courses")
            resp.raise_for_status()
            courses = resp.json()
        except Exception:
            msg = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤." if lang == "ru" else "‚ö†Ô∏è Couldn't retrieve the course list."
            await update.message.reply_text(msg)
            return ConversationHandler.END

        course_id = None
        for i, course in enumerate(courses, start=1):
            try:
                r = await client.get(f"/courses/{i}/groups")
                if r.status_code == 200 and group in r.json():
                    course_id = i
                    break
            except Exception:
                continue

        if course_id is None:
            msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." if lang == "ru" \
                else "‚ùå The group you entered wasn't found. Please try again."
            await update.message.reply_text(msg)
            return WAITING_FOR_FULL_NAME

        payload = {
            "surname": surname,
            "name": name,
            "patronymic": patronymic
        }

        try:
            check = await client.post(f"/courses/{course_id}/groups/{group}/check-student", json=payload)
            if check.status_code != 200:
                msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –§–ò–û. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." if lang == "ru" \
                    else "‚ùå We couldn't find that name. Please try again."
                await update.message.reply_text(msg)
                return WAITING_FOR_FULL_NAME
        except Exception:
            msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É." if lang == "ru" else "‚ö†Ô∏è Server connection error."
            await update.message.reply_text(msg)
            return WAITING_FOR_FULL_NAME

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data["auth_data"] = {
        "group_id": group,
        "surname": surname,
        "name": name,
        "patronymic": patronymic
    }

    if lang == "ru":
        confirm_text = (
            f"üîé –ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
            f"–ì—Ä—É–ø–ø–∞: {group}\n"
            f"–§–ò–û: {surname} {name} {patronymic}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?"
        )
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_auth"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_auth")
            ]
        ])
    else:
        confirm_text = (
            f"üîé The following data was found in the table:\n"
            f"Group: {group}\n"
            f"Full name: {surname} {name} {patronymic}\n\n"
            f"Confirm data?"
        )
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ Yes", callback_data="confirm_auth"),
                InlineKeyboardButton("‚ùå No", callback_data="cancel_auth")
            ]
        ])

    await update.message.reply_text(confirm_text, reply_markup=keyboard)
    return WAITING_FOR_CONFIRMATION



async def handle_github(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not context.user_data.pop("awaiting_github", False):
        return ConversationHandler.END

    github = update.message.text.strip()
    context.user_data["pending_github"] = github

    lang = get_language(update.effective_user.id)

    text = (
        f"üîé –í—ã –≤–≤–µ–ª–∏ GitHub-–Ω–∏–∫: `{github}`\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?"
        if lang == "ru"
        else f"üîé You entered GitHub username: `{github}`\n\nConfirm?"
    )

    if lang == "ru":
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_github"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_github")
            ]
        ])
    else:
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ Yes", callback_data="confirm_github"),
                InlineKeyboardButton("‚ùå No", callback_data="cancel_github")
            ]
        ])

    await update.message.reply_text(text, reply_markup=keyboard, parse_mode="Markdown")
    return WAITING_FOR_GITHUB



async def show_lab_buttons(query, context):
    course_id = context.user_data.get("test_course")
    group_id = context.user_data.get("test_group")
    lang = get_language(query.from_user.id)
    user_id = query.from_user.id

    if not course_id or not group_id:
        msg = "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ù–µ —É–∫–∞–∑–∞–Ω –∫—É—Ä—Å –∏–ª–∏ –≥—Ä—É–ø–ø–∞." if lang == "ru" \
            else "‚ö†Ô∏è Internal error: course or group missing."
        await query.message.edit_text(msg)
        
        next_msg = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "üìå Select an action:"
        keyboard = get_main_keyboard(lang)
        await query.message.reply_text(next_msg, reply_markup=keyboard)

        update_last_menu(user_id, next_msg, keyboard)
        
        return ConversationHandler.END

    async with httpx.AsyncClient(base_url="http://backend:8000") as client:
        try:
            r = await client.get(f"/courses/{course_id}/groups/{group_id}/labs")
            r.raise_for_status()
            labs = r.json()
        except Exception:
            msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç." if lang == "ru" \
                else "‚ùå Failed to retrieve lab list."
            await query.message.edit_text(msg)
            
            next_msg = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "üìå Select an action:"
            keyboard = get_main_keyboard(lang)
            await query.message.reply_text(next_msg, reply_markup=keyboard)

            update_last_menu(user_id, next_msg, keyboard)
            
            return ConversationHandler.END

    if not labs:
        msg = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç." if lang == "ru" \
            else "‚ùå No available labs found."
        await query.message.edit_text(msg)
        
        next_msg = "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if lang == "ru" else "üìå Select an action:"
        keyboard = get_main_keyboard(lang)
        await query.message.reply_text(next_msg, reply_markup=keyboard)

        update_last_menu(user_id, next_msg, keyboard)
            
        return ConversationHandler.END

    keyboard = [[InlineKeyboardButton(lab, callback_data=f"check_lab_{lab}")] for lab in labs]
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞" if lang == "ru" else "‚Ü©Ô∏è Cancel", callback_data="cancel_test")])

    await query.message.edit_text(
        "üß™ –í—ã–±–µ—Ä–∏—Ç–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É:" if lang == "ru" else "üß™ Select a lab to check:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CHOOSING_LAB



# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
def main():
    init_db()
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(handle_button, pattern="^continue$"),
            CallbackQueryHandler(handle_button, pattern="^register_github$")
        ],
        states={
            WAITING_FOR_FULL_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_full_name)
            ],
            WAITING_FOR_CONFIRMATION: [
                CallbackQueryHandler(handle_button, pattern="^(confirm_auth|cancel_auth)$")
            ],
            WAITING_FOR_GITHUB: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_github)
            ],
            CHOOSING_COURSE: [
                CallbackQueryHandler(handle_button, pattern="^select_course_\\d+$")
            ],
            CHOOSING_LAB: [
                CallbackQueryHandler(handle_button, pattern="^check_lab_")
            ],
        },
        fallbacks=[]
    )
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)  # ‚¨ÖÔ∏è —Å–Ω–∞—á–∞–ª–∞ conv_handler
    application.add_handler(CallbackQueryHandler(handle_button))

    application.run_polling()



if __name__ == "__main__":
    main()
